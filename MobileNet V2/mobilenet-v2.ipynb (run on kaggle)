{"metadata":{"kernelspec":{"language":"python","display_name":"Python 3","name":"python3"},"language_info":{"name":"python","version":"3.7.12","mimetype":"text/x-python","codemirror_mode":{"name":"ipython","version":3},"pygments_lexer":"ipython3","nbconvert_exporter":"python","file_extension":".py"}},"nbformat_minor":4,"nbformat":4,"cells":[{"cell_type":"code","source":"# This Python 3 environment comes with many helpful analytics libraries installed\n# It is defined by the kaggle/python Docker image: https://github.com/kaggle/docker-python\n# For example, here's several helpful packages to load\n\nimport numpy as np # linear algebra\nimport pandas as pd # data processing, CSV file I/O (e.g. pd.read_csv)\n\n# Input data files are available in the read-only \"../input/\" directory\n# For example, running this (by clicking run or pressing Shift+Enter) will list all files under the input directory\n\nimport os\nfor dirname, _, filenames in os.walk('/kaggle/input'):\n    for filename in filenames:\n        print(os.path.join(dirname, filename))\n\n# You can write up to 20GB to the current directory (/kaggle/working/) that gets preserved as output when you create a version using \"Save & Run All\" \n# You can also write temporary files to /kaggle/temp/, but they won't be saved outside of the current session","metadata":{"_uuid":"8f2839f25d086af736a60e9eeb907d3b93b6e0e5","_cell_guid":"b1076dfc-b9ad-4769-8c92-a6c4dae69d19","execution":{"iopub.status.busy":"2022-03-22T11:47:42.065834Z","iopub.execute_input":"2022-03-22T11:47:42.066248Z","iopub.status.idle":"2022-03-22T11:47:43.439588Z","shell.execute_reply.started":"2022-03-22T11:47:42.066164Z","shell.execute_reply":"2022-03-22T11:47:43.438204Z"},"trusted":true},"execution_count":1,"outputs":[]},{"cell_type":"code","source":"import numpy as np\nimport pandas as pd\nfrom pathlib import Path\nimport os.path\nimport matplotlib.pyplot as plt\nfrom IPython.display import Image, display\nimport matplotlib.cm as cm\nfrom sklearn.model_selection import train_test_split\nimport tensorflow as tf ","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:09:54.690370Z","iopub.execute_input":"2022-03-22T12:09:54.691020Z","iopub.status.idle":"2022-03-22T12:09:54.697324Z","shell.execute_reply.started":"2022-03-22T12:09:54.690973Z","shell.execute_reply":"2022-03-22T12:09:54.696484Z"},"trusted":true},"execution_count":24,"outputs":[]},{"cell_type":"code","source":"from fastai.vision.all import *\nfrom fastai.imports import *\nfrom fastai.vision.data import *\nfrom fastai import *","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:09:56.540329Z","iopub.execute_input":"2022-03-22T12:09:56.541076Z","iopub.status.idle":"2022-03-22T12:09:56.546159Z","shell.execute_reply.started":"2022-03-22T12:09:56.541036Z","shell.execute_reply":"2022-03-22T12:09:56.545111Z"},"trusted":true},"execution_count":25,"outputs":[]},{"cell_type":"code","source":"image_dir = Path(\"/kaggle/input/shark-species/sharks\")\n# Get filepaths and labels\nfilepaths = list(image_dir.glob(r'*/*'))\nlabels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1], filepaths))\n\nfilepaths = pd.Series(filepaths, name='Filepath').astype(str)\nlabels = pd.Series(labels, name='Label')\n\n# Concatenate filepaths and labels\nimage_df= pd.concat([filepaths, labels], axis=1)\n","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:09:58.392021Z","iopub.execute_input":"2022-03-22T12:09:58.392311Z","iopub.status.idle":"2022-03-22T12:09:58.433029Z","shell.execute_reply.started":"2022-03-22T12:09:58.392268Z","shell.execute_reply":"2022-03-22T12:09:58.432271Z"},"trusted":true},"execution_count":26,"outputs":[]},{"cell_type":"code","source":"image_df = image_df[image_df['Label'].isin(['whitetip','hammerhead','basking','tiger','white'])]","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:14:32.329065Z","iopub.execute_input":"2022-03-22T12:14:32.329320Z","iopub.status.idle":"2022-03-22T12:14:32.335529Z","shell.execute_reply.started":"2022-03-22T12:14:32.329288Z","shell.execute_reply":"2022-03-22T12:14:32.334673Z"},"trusted":true},"execution_count":34,"outputs":[]},{"cell_type":"code","source":"#lst = []\n#for l in image_df['Label'].unique():\n#    lst.append(image_df[image_df['Label'] == l] .sample(50, random_state = 0))\n# Concatenate the DataFrames\n#image_df = pd.concat(lst)","metadata":{"trusted":true},"execution_count":null,"outputs":[]},{"cell_type":"code","source":"image_df.describe()","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:14:35.677905Z","iopub.execute_input":"2022-03-22T12:14:35.678171Z","iopub.status.idle":"2022-03-22T12:14:35.703153Z","shell.execute_reply.started":"2022-03-22T12:14:35.678142Z","shell.execute_reply":"2022-03-22T12:14:35.697773Z"},"trusted":true},"execution_count":35,"outputs":[]},{"cell_type":"code","source":"image_dir1 = Path(\"/kaggle/input/crocodile-gharial-classification-fastai\")\n# Get filepaths and labels\nfilepaths = list(image_dir1.glob(r'**/*.jpg'))\nlabels = list(map(lambda x: os.path.split(os.path.split(x)[0])[1], filepaths))\n\nfilepaths = pd.Series(filepaths, name='Filepath').astype(str)\nlabels = pd.Series(labels, name='Label')\n\n# Concatenate filepaths and labels\nimage_df1= pd.concat([filepaths, labels], axis=1)","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:14:38.251911Z","iopub.execute_input":"2022-03-22T12:14:38.252169Z","iopub.status.idle":"2022-03-22T12:14:38.281291Z","shell.execute_reply.started":"2022-03-22T12:14:38.252138Z","shell.execute_reply":"2022-03-22T12:14:38.280622Z"},"trusted":true},"execution_count":36,"outputs":[]},{"cell_type":"code","source":"image_df1 = image_df1[image_df1['Label']=='alligator']","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:14:40.403382Z","iopub.execute_input":"2022-03-22T12:14:40.403961Z","iopub.status.idle":"2022-03-22T12:14:40.409534Z","shell.execute_reply.started":"2022-03-22T12:14:40.403920Z","shell.execute_reply":"2022-03-22T12:14:40.408669Z"},"trusted":true},"execution_count":37,"outputs":[]},{"cell_type":"code","source":"image_df1.describe()","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:14:41.934240Z","iopub.execute_input":"2022-03-22T12:14:41.934798Z","iopub.status.idle":"2022-03-22T12:14:41.948064Z","shell.execute_reply.started":"2022-03-22T12:14:41.934758Z","shell.execute_reply":"2022-03-22T12:14:41.947263Z"},"trusted":true},"execution_count":38,"outputs":[]},{"cell_type":"code","source":"im_df = image_df.append(image_df1, ignore_index=True)\nim_df = im_df.sample(frac=1).reset_index(drop = True)\nim_df.head(3)","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:14:43.464251Z","iopub.execute_input":"2022-03-22T12:14:43.465155Z","iopub.status.idle":"2022-03-22T12:14:43.476946Z","shell.execute_reply.started":"2022-03-22T12:14:43.465105Z","shell.execute_reply":"2022-03-22T12:14:43.476191Z"},"trusted":true},"execution_count":39,"outputs":[]},{"cell_type":"code","source":"im_df['Label'].unique()","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:14:45.307272Z","iopub.execute_input":"2022-03-22T12:14:45.307985Z","iopub.status.idle":"2022-03-22T12:14:45.314426Z","shell.execute_reply.started":"2022-03-22T12:14:45.307933Z","shell.execute_reply":"2022-03-22T12:14:45.313584Z"},"trusted":true},"execution_count":40,"outputs":[]},{"cell_type":"code","source":"len(im_df['Label'].unique())","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:14:47.211581Z","iopub.execute_input":"2022-03-22T12:14:47.211835Z","iopub.status.idle":"2022-03-22T12:14:47.217544Z","shell.execute_reply.started":"2022-03-22T12:14:47.211807Z","shell.execute_reply":"2022-03-22T12:14:47.216851Z"},"trusted":true},"execution_count":41,"outputs":[]},{"cell_type":"code","source":"fig, axes = plt.subplots(nrows=3, ncols=5, figsize=(15, 7),\n                        subplot_kw={'xticks': [], 'yticks': []})\n\nfor i, ax in enumerate(axes.flat):\n    ax.imshow(plt.imread(im_df.Filepath[i]))\n    ax.set_title(im_df.Label[i])\nplt.tight_layout()\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:14:48.619638Z","iopub.execute_input":"2022-03-22T12:14:48.620220Z","iopub.status.idle":"2022-03-22T12:14:52.195340Z","shell.execute_reply.started":"2022-03-22T12:14:48.620178Z","shell.execute_reply":"2022-03-22T12:14:52.194716Z"},"trusted":true},"execution_count":42,"outputs":[]},{"cell_type":"code","source":"train_df, test_df = train_test_split(im_df, train_size=0.9, shuffle=True, random_state=1)\ntest_df.describe()","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:15:00.221187Z","iopub.execute_input":"2022-03-22T12:15:00.221451Z","iopub.status.idle":"2022-03-22T12:15:00.240751Z","shell.execute_reply.started":"2022-03-22T12:15:00.221420Z","shell.execute_reply":"2022-03-22T12:15:00.240123Z"},"trusted":true},"execution_count":43,"outputs":[]},{"cell_type":"code","source":"train_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input,\n    validation_split=0.2\n)\n\ntest_generator = tf.keras.preprocessing.image.ImageDataGenerator(\n    preprocessing_function=tf.keras.applications.mobilenet_v2.preprocess_input\n)","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:15:03.331805Z","iopub.execute_input":"2022-03-22T12:15:03.332336Z","iopub.status.idle":"2022-03-22T12:15:03.337359Z","shell.execute_reply.started":"2022-03-22T12:15:03.332296Z","shell.execute_reply":"2022-03-22T12:15:03.336554Z"},"trusted":true},"execution_count":44,"outputs":[]},{"cell_type":"code","source":"train_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='training'\n)\n\nval_images = train_generator.flow_from_dataframe(\n    dataframe=train_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=True,\n    seed=42,\n    subset='validation'\n)\ntest_images = test_generator.flow_from_dataframe(\n    dataframe=test_df,\n    x_col='Filepath',\n    y_col='Label',\n    target_size=(224, 224),\n    color_mode='rgb',\n    class_mode='categorical',\n    batch_size=32,\n    shuffle=False\n)","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:15:05.531298Z","iopub.execute_input":"2022-03-22T12:15:05.531564Z","iopub.status.idle":"2022-03-22T12:15:05.565277Z","shell.execute_reply.started":"2022-03-22T12:15:05.531529Z","shell.execute_reply":"2022-03-22T12:15:05.564406Z"},"trusted":true},"execution_count":46,"outputs":[]},{"cell_type":"code","source":"pretrained_model = tf.keras.applications.mobilenet_v2.MobileNetV2(\n    input_shape=(224, 224, 3),\n    include_top=False,\n    weights='imagenet',\n    pooling='avg'\n)\n\npretrained_model.trainable = False","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:15:14.581477Z","iopub.execute_input":"2022-03-22T12:15:14.581709Z","iopub.status.idle":"2022-03-22T12:15:15.488054Z","shell.execute_reply.started":"2022-03-22T12:15:14.581676Z","shell.execute_reply":"2022-03-22T12:15:15.487329Z"},"trusted":true},"execution_count":48,"outputs":[]},{"cell_type":"code","source":"inputs = pretrained_model.input\n\nx = tf.keras.layers.Dense(128, activation='relu')(pretrained_model.output)\nx = tf.keras.layers.Dense(128, activation='relu')(x)\n\noutputs = tf.keras.layers.Dense(6, activation='softmax')(x)\n\nmodel = tf.keras.Model(inputs=inputs, outputs=outputs)\n\nmodel.compile(\n    optimizer='adam',\n    loss='categorical_crossentropy',\n    metrics=['accuracy']\n)\n\nhistory = model.fit(\n    train_images,\n    validation_data=val_images,\n    epochs=50,\n    callbacks=[\n        tf.keras.callbacks.EarlyStopping(\n            monitor='val_loss',\n            patience=1,\n            restore_best_weights=True\n        )\n    ]\n)","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:15:21.132297Z","iopub.execute_input":"2022-03-22T12:15:21.132786Z","iopub.status.idle":"2022-03-22T12:17:40.338894Z","shell.execute_reply.started":"2022-03-22T12:15:21.132746Z","shell.execute_reply":"2022-03-22T12:17:40.338160Z"},"trusted":true},"execution_count":49,"outputs":[]},{"cell_type":"code","source":"pd.DataFrame(history.history)[['accuracy','val_accuracy']].plot()\nplt.title(\"Accuracy\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:18:08.972220Z","iopub.execute_input":"2022-03-22T12:18:08.972595Z","iopub.status.idle":"2022-03-22T12:18:09.194746Z","shell.execute_reply.started":"2022-03-22T12:18:08.972559Z","shell.execute_reply":"2022-03-22T12:18:09.194067Z"},"trusted":true},"execution_count":50,"outputs":[]},{"cell_type":"code","source":"pd.DataFrame(history.history)[['loss','val_loss']].plot()\nplt.title(\"Loss\")\nplt.show()","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:18:13.892903Z","iopub.execute_input":"2022-03-22T12:18:13.893160Z","iopub.status.idle":"2022-03-22T12:18:14.077817Z","shell.execute_reply.started":"2022-03-22T12:18:13.893130Z","shell.execute_reply":"2022-03-22T12:18:14.077139Z"},"trusted":true},"execution_count":51,"outputs":[]},{"cell_type":"code","source":"results = model.evaluate(test_images, verbose=0)\n\nprint(\"    Test Loss:\",(results[0]))\nprint(\"Test Accuracy:\",(results[1] * 100),\"%\")","metadata":{"execution":{"iopub.status.busy":"2022-03-22T12:18:16.778101Z","iopub.execute_input":"2022-03-22T12:18:16.778395Z","iopub.status.idle":"2022-03-22T12:18:21.006600Z","shell.execute_reply.started":"2022-03-22T12:18:16.778339Z","shell.execute_reply":"2022-03-22T12:18:21.005000Z"},"trusted":true},"execution_count":52,"outputs":[]},{"cell_type":"code","source":"","metadata":{},"execution_count":null,"outputs":[]}]}